// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class EventInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save EventInfo entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EventInfo entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EventInfo", id.toString(), this);
  }

  static load(id: string): EventInfo | null {
    return store.get("EventInfo", id) as EventInfo | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get START(): BigInt {
    let value = this.get("START");
    return value.toBigInt();
  }

  set START(value: BigInt) {
    this.set("START", Value.fromBigInt(value));
  }

  get END(): BigInt {
    let value = this.get("END");
    return value.toBigInt();
  }

  set END(value: BigInt) {
    this.set("END", Value.fromBigInt(value));
  }

  get MINIMAL_PROVIDE_AMOUNT(): BigInt {
    let value = this.get("MINIMAL_PROVIDE_AMOUNT");
    return value.toBigInt();
  }

  set MINIMAL_PROVIDE_AMOUNT(value: BigInt) {
    this.set("MINIMAL_PROVIDE_AMOUNT", Value.fromBigInt(value));
  }

  get TOTAL_DISTRIBUTE_AMOUNT(): BigInt {
    let value = this.get("TOTAL_DISTRIBUTE_AMOUNT");
    return value.toBigInt();
  }

  set TOTAL_DISTRIBUTE_AMOUNT(value: BigInt) {
    this.set("TOTAL_DISTRIBUTE_AMOUNT", Value.fromBigInt(value));
  }

  get totalProvided(): BigInt {
    let value = this.get("totalProvided");
    return value.toBigInt();
  }

  set totalProvided(value: BigInt) {
    this.set("totalProvided", Value.fromBigInt(value));
  }

  get totalClaimed(): BigInt {
    let value = this.get("totalClaimed");
    return value.toBigInt();
  }

  set totalClaimed(value: BigInt) {
    this.set("totalClaimed", Value.fromBigInt(value));
  }

  get balanceOfTXJP(): BigInt {
    let value = this.get("balanceOfTXJP");
    return value.toBigInt();
  }

  set balanceOfTXJP(value: BigInt) {
    this.set("balanceOfTXJP", Value.fromBigInt(value));
  }
}

export class PersonalBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PersonalBalance entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PersonalBalance entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PersonalBalance", id.toString(), this);
  }

  static load(id: string): PersonalBalance | null {
    return store.get("PersonalBalance", id) as PersonalBalance | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get claimed(): boolean {
    let value = this.get("claimed");
    return value.toBoolean();
  }

  set claimed(value: boolean) {
    this.set("claimed", Value.fromBoolean(value));
  }

  get claimedTXJPAmount(): BigInt {
    let value = this.get("claimedTXJPAmount");
    return value.toBigInt();
  }

  set claimedTXJPAmount(value: BigInt) {
    this.set("claimedTXJPAmount", Value.fromBigInt(value));
  }
}
